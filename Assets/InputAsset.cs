//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAsset"",
    ""maps"": [
        {
            ""name"": ""SimpleActionMap"",
            ""id"": ""949f730c-c238-4dda-a7db-bbe055e2517c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""eacc5dfc-03f8-4586-864d-1d0555f0929c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""6e295cc7-a4c8-483b-801a-2078f5ee38c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f146b3f8-beaa-4051-9df8-c30d84680898"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""348b891b-1d66-4b2d-976b-86c543d8251c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DesktopScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7f8c934a-f686-49bd-89d2-8ba7da491fac"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DesktopScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d466462d-e12d-4b9b-9e8b-57d2ab1ff616"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DesktopScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ac6dd29c-c603-483f-8c88-e964eae70b22"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DesktopScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6564f303-fc98-4254-b93a-a10ace144e76"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DesktopScheme"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DesktopScheme"",
            ""bindingGroup"": ""DesktopScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SimpleActionMap
        m_SimpleActionMap = asset.FindActionMap("SimpleActionMap", throwIfNotFound: true);
        m_SimpleActionMap_Move = m_SimpleActionMap.FindAction("Move", throwIfNotFound: true);
        m_SimpleActionMap_Fire = m_SimpleActionMap.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SimpleActionMap
    private readonly InputActionMap m_SimpleActionMap;
    private List<ISimpleActionMapActions> m_SimpleActionMapActionsCallbackInterfaces = new List<ISimpleActionMapActions>();
    private readonly InputAction m_SimpleActionMap_Move;
    private readonly InputAction m_SimpleActionMap_Fire;
    public struct SimpleActionMapActions
    {
        private @InputAsset m_Wrapper;
        public SimpleActionMapActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SimpleActionMap_Move;
        public InputAction @Fire => m_Wrapper.m_SimpleActionMap_Fire;
        public InputActionMap Get() { return m_Wrapper.m_SimpleActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SimpleActionMapActions set) { return set.Get(); }
        public void AddCallbacks(ISimpleActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SimpleActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SimpleActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(ISimpleActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(ISimpleActionMapActions instance)
        {
            if (m_Wrapper.m_SimpleActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISimpleActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SimpleActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SimpleActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SimpleActionMapActions @SimpleActionMap => new SimpleActionMapActions(this);
    private int m_DesktopSchemeSchemeIndex = -1;
    public InputControlScheme DesktopSchemeScheme
    {
        get
        {
            if (m_DesktopSchemeSchemeIndex == -1) m_DesktopSchemeSchemeIndex = asset.FindControlSchemeIndex("DesktopScheme");
            return asset.controlSchemes[m_DesktopSchemeSchemeIndex];
        }
    }
    public interface ISimpleActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
